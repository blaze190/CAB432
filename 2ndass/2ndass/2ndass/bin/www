#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app.js');
var debug = require('debug')('2ndass:server');
var http = require('http');

const Twitter = require('twitter');
const Sentiment = require('sentiment');
const keyRoute = require('../config.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const io = require('socket.io').listen(server);
let queryList = [];
/**
 * Setup Twitter Stream and sentiment analysis
 */

let sentiment = new Sentiment();

const client = new Twitter({
  consumer_key: keyRoute.twitter.consumer.key,
  consumer_secret: keyRoute.twitter.consumer.secret,
  access_token_key:keyRoute.twitter.access.key,
  access_token_secret: keyRoute.twitter.access.secret
});


let twitterStream;

let position = 0;
let query = 'asdfghjklqwertyuiop';

/*
 * Twitter stream initiator
 */
let result = [];
let tweets = [];

function StartStream(query){
	console.log(query);
	client.stream('statuses/filter', {track: query}, function(stream) {
		stream.on('data', function(event){
			twitterStream = stream;
			tweets.unshift(event.text);
			io.emit('update');
		});
	});
}

function SentimentAnalyse(tweet, idQuery, output){
	let posc = output[0];
	let neuc = output[1];
	let negc = output[2];
	if(tweet != 'undefined' && tweet.indexOf(idQuery) > -1){
		let bodyparsed = sentiment.analyze(tweet);
			
		if(bodyparsed.score > 0){
			posc++;
			console.log("positive "  + posc);
		}
		else if(bodyparsed.score < 0){
			negc++;
			console.log("negative " + negc);
		}
		else if(bodyparsed.score == 0){
			neuc++;
			console.log("neutral "  + neuc);
		}
	}
	result = [posc, neuc, negc];
	console.log(result);
	return result;
}
	
io.on('connection', function(socket){
	let graphData = [0,0,0];
	for(let i = 0; i < queryList.length; i++){
		if(queryList[i].indexOf(socket.request.connection.remoteAddress) > -1){
			graphData = queryList[i][2];
		}
	}
	console.log('a user connected');
	socket.on('searchInput', function(message){
		console.log('message : ' + message);
		queryList.unshift([socket.request.connection.remoteAddress, message, graphData]);
		for(let i = 0; i < queryList.length; i++){
			if(i == 0){
				query = queryList[i][1];
			}else if (queryList[i][1] != 'undefined'){
				query = query + ', ' + queryList[i][1];
			}
		}
		if(typeof(twitterStream) != 'undefined'){
			graphData = [0,0,0];
    		twitterStream.destroy();
   			console.log("destroy");
  		}
		StartStream(query);
		
	});

	socket.on('refresh', function(){
		let filter = 'asdfghjkl';
		for(let i = 0; i < queryList.length; i++){
			if(queryList[i].indexOf(socket.request.connection.remoteAddress) > -1){
				filter = queryList[i][1];
				queryList[i][2] = graphData;
			}

			if(typeof(twitterStream) == 'undefined' && i == 0){
				query = queryList[i][1];
			}else if (typeof(twitterStream) == 'undefined' && queryList[i][1] != 'undefined'){
				query = query + ', ' + queryList[i][1];
			}
		}
		if(typeof(twitterStream) == 'undefined'){
			StartStream(query);
  		}
		graphData = SentimentAnalyse(tweets[0], filter, graphData);
		tweets[0] 
		socket.emit('searchResult', graphData);
	});	

	socket.on('disconnect', function(){
		console.log('user disconnected');
	});
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}



